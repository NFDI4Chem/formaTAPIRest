# TAPIR: A REST interface providing file format conversions

Format conversions are a common and important operation in data analysis and data archiving. 

## Overview
This server was generated by the [OpenAPI Generator](https://openapi-generator.tech) project. By using the
[OpenAPI-Spec](https://openapis.org) from a remote server, you can easily generate a server stub.  This
is an example of building a OpenAPI-enabled Flask server.

This example uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.

The server was generated via
```
docker run --rm --workdir /local -v ${PWD}:/local openapitools/openapi-generator-cli  generate -i /local/openapi/openapi.yaml  -g python-flask -c config.yaml -o /local
```

## Requirements
{{#supportPython2}}
Python 2.7+
{{/supportPython2}}
{{^supportPython2}}
Python 3.5.2+
{{/supportPython2}}

## Usage
To run the server, please execute the following from the root directory:

```
{{#supportPython2}}
pip install -r requirements.txt
python -m {{packageName}}
{{/supportPython2}}
{{^supportPython2}}
pip3 install -r requirements.txt
python3 -m {{packageName}}
{{/supportPython2}}
```

and open your browser to here:

```
http://localhost:{{serverPort}}{{contextPath}}/ui/
```

Your OpenAPI definition lives here:

```
http://localhost:{{serverPort}}{{contextPath}}/openapi.json
```

Some example calls via CURL are:
```
curl -X POST "https://msbi.ipb-halle.de/formaTAPIRest/v1/convert/png/to/jpg" -H  "accept: image/jpg" -H  "Content-Type: image/png" -d @kitten.png
curl -X POST "http://localhost:8080/formaTAPIRest/v1/convert/mzXML/to/mzML" -H  "accept: application/xml:" -H  "Content-Type: multipart/form-data" -F "profile=" -F "inputfile=@BSA-FT-HCD.raw;type=application/octet-stream"
curl -X POST "http://localhost:8080/formaTAPIRest/v1/convert/mzXML/to/mzML" -H  "accept: application/xml:" -H  "Content-Type: multipart/form-data" -F "profile=xxx" -F "inputfile=@test.mzXML"
```


To launch the integration tests, use tox:
```
sudo pip install tox
tox
```

## Running with Docker

To run the server on a Docker container, please execute the following from the root directory:

```bash
# building the image
docker build -t {{packageName}} .

# starting up a container
docker run -p {{serverPort}}:{{serverPort}} {{packageName}}
```
